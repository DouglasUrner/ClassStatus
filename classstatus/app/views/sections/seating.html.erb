<div class="seating-chart">
  <div class="seating-chart-sidebar">
    <%= seating_chart_buttons %>
    <%= unseated %>
  </div>
  <%= empty_seatmap(4, 8, [8, 8, 8, 6]) %>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/web-animations/2.3.1/web-animations.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>
<script src="https://unpkg.com/muuri@0.6.3/dist/muuri.min.js"></script>

<script type="text/javascript">
  var allSeats = [].slice.call(document.querySelectorAll('.seat'));

  /**
   * All of the grids, used as the return value from the dragSort function.
   * @type {Array}
   */
  var areas = [];

  /**
   * Just the grids in the seat map (i.e., each individual seat).
   * @type {Array}
   *
   * XXX - how should this really be done? seatmap will probably be areas[1..end],
   *       we could depend on that and use areas[], or we could figure out how to
   *       pass unseated + seatmap[] as a single array as the return value from
   *       the dragSort function. But for now...
   */
  var seatmap = [];

  /**
   * Buttons
   */

  /**
   * Clear the seatmap.
   */
  var buttonClear = document.querySelector('.button-clear');
  if (buttonClear) {
    buttonClear.addEventListener('click', function() {
      /**
       * Loop through the seatmap and send them back to the unseated grid.
       */
      seatmap.forEach(function(grid) {
        grid._items.forEach(function(stu) {
          grid.send(stu, unseated, -1);
        })
      });
      unseated.sort('name', {
        layout: 'instant'
      });
    });
  }

  /**
   * Randomly add the unseated students to the seatmap starting at the front
   * of the room (lower right corner for now).
   *
   * TODO: allow the user to set a parameter to define the order in which seats
   *       are assigned. For example: front, back, and randomly (leaving random
   *       holes in the seatmap).
   */
  var buttonRandom = document.querySelector('.button-random');
  if (buttonRandom) {
    buttonRandom.addEventListener('click', function() {
      for (i = seatmap.length - 1; i >= 0; i--) {
        if (unseated._items.length > 0) {
          if (seatmap[i]._items.length == 0) {
            // Empty seat.
            j = randomInt(0, unseated._items.length - 1);
            // console.log(j + " -> " + i);
            unseated.send(unseated._items[j],
              seatmap[i], 0);
          }
        }
      }
    });
  }

  /**
   * Return a random integer between min (inclusive) and max (inclusive).
   * The value is no lower than min (or the next integer greater than min
   * if min isn't an integer) and no greater than max (or the next integer
   * lower than max if max isn't an integer).
   *
   * Using Math.round() will give you a non-uniform distribution!
   */
  function randomInt(min, max) {
      min = Math.ceil(min);
      max = Math.floor(max);
      return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  /**
   * Save seating layout (persist to database)
   */
  var buttonSave = document.querySelector('.button-save');
  if (buttonSave) {
    buttonSave.addEventListener('click', function() {
      saveLayout(seatmap, 'data-student-id');
      //alert('Save - not implemented yet.');
    });
  }

  /**
   * Muuri grid: names of students without seat assignments.
   */
  unseated = new Muuri('.unseated', {
    dragEnabled: true,
    sortData: {
      name: function(item, element) {
        return element.children[0].textContent;
      }
    },
    dragContainer: document.body,
    dragSort: function() {
      unseated.sort('name');
      return areas;
    }
  })
  /**
   * When dragging set the object dimensions to fixed values so that they won't
   * scale themselves to the containing object as they move. This works because
   * we are adding a style property to the element (so it overrides the CSS
   * styling, then when we remove it, the CSS is still there and reasserts
   * itself).
   */
  .on('dragStart', function(item) {
    item.getElement().style.width = item.getWidth() + 'px';
    item.getElement().style.height = item.getHeight() + 'px';
    // console.log("dragStart: item => " + item);
  })
  .on('dragReleaseEnd', function(item) {
    item.getElement().style.width = '';
    item.getElement().style.height = '';
    // console.log("dragReleaseEnd: item => " + item);
  })
  .on('beforeReceive', function(data) {
    // TODO: get the width of the receiving grid (from data.toGrid)
    data.item.getElement().style.width = data.toGrid._width + 'px';
    data.item.getElement().style.height = '';
    // console.log("beforeReceive: data => " + data);
    //console.log(data.toGrid._width);
  })
  .on('move', function(data) {
    // console.log("move: data => " + data);
    // Seems like it should work, but it doesn't...
    // unseated.sort('name', {
    //   layout: 'instant'
    // });
  })
  .on('receive', function(data) {
    // console.log("receive: data => " + data);
    // Seems like it should work, but it doesn't...
    // unseated.sort('name', {
    //   layout: 'instant'
    // });
  });

  areas.push(unseated);

  // Ensure an initial sort.
  unseated.sort('name', {
    layout: 'instant'
  });

  allSeats.forEach(function(s) {

    var seat = new Muuri(s, {
      dragEnabled: true,
      dragContainer: document.body,
      dragSort: function() {
        unseated.sort('name');
        return areas;
      },
    })
    .on('dragStart', function(item) {
      item.getElement().style.width = item.getWidth() + 'px';
      item.getElement().style.height = item.getHeight() + 'px';
      console.log("dragging from seat: height = " + item.getElement().style.height);
    })
    .on('beforeReceive', function(data) {
      data.item.getElement().style.width = data.toGrid._width + 'px';
      data.item.getElement().style.height = '';
    })
    .on('dragReleaseEnd', function(item) {
      item.getElement().style.width = '';
      item.getElement().style.height = '';
    })
    .on('receive', function(data) {
    });

    areas.push(seat);
    seatmap.push(seat);
  });

  /**
   * While seats are being arranged persist layout to local storage. After
   * saving layout (seating chart) is stored in the database and will be the
   * same for all users/devices.
   *
   * Save as JSON:
   * - Array for unseated grid.
   * - Array for the individual grids in the seatmap.
   *
   * Name for the block being seated. Delete on save. If necessary seats
   * could be given individual id values.
   */

  // console.log(areas[0]);

  var layout = window.localStorage.getItem('layout');

  if (layout) {
    loadLayout(seatmap, unseated, layout, 'data-student-id');
  } else {
    seatmap.layout(true);
  }

  /**
   * [loadLayout description]
   * @param  {object or array of objects} gridOrGrids [Muuri grid or grid array]
   * @param  {string} serializedLayout [serialized JSON holding the layout]
   * @param  {string} attribute        [HTML attribute to look for]
   * @return {void}
   *
   * Loop over the serializeLayout placing objects from the source grid into
   * the target grid using attribute as the key by which to identify the
   * objects in the source grid. The source and target grids may be the same
   * grid. The target grid must be an array of grids if serializeLayout is an
   * array of arrays.
   *
   * Use the unseated grid as the source, loop over the saved layout finding
   * each item in the unsteated grid and sending it to the postion in the
   * seatmap that corresponds to the index in the layout. For attendance and
   * progress the seating chart can be generated with the display property of
   * the sidebar set to hidden.
   */

  function loadLayout(target, source, serializedLayout, attribute) {
    var layout = JSON.parse(serializedLayout);
    var currentItems = source.getItems();
    var currentItemIds = currentItems.map(function (item) {
      return item.getElement().getAttribute(attribute)
    });
    var newItems = [];
    var itemId;
    var itemIndex;

   /*
    * Loop over the saved layout and instantiate each item in the corresponding
    * grid of the target grid.
    */
  //   for (var i = 0; i < layout.length; i++) {
  //     itemId = layout[i];
  //     itemIndex = currentItemIds.indexOf(itemId);
  //     if (itemIndex > -1) {
  //       newItems.push(currentItems[itemIndex])
  //     }
  //   }
  //   grid.sort(newItems, {layout: 'instant'});
  }

  function saveLayout(grid, attribute) {
    // TODO: need a layout per section. Would be nice to have the abilty
    //       to store historical layouts.
    var layout = serializeLayout(grid, attribute);
    console.log(layout);
    window.localStorage.setItem('layout', layout);
  }

  function serializeLayout(gridOrGrids, attribute) {
    var itemIds;
    if (true) {
      // grid is an array of grids.
      itemIds = [];
      gridOrGrids.forEach((grid, i) => {
        attr = grid.getItems().map(function (item) {
          return item.getElement().getAttribute(attribute);
        });
        itemIds.push(attr);
      });
    } else {
      itemIds = gridOrGrids.getItems().map(function (item) {
        return item.getElement().getAttribute(attribute);
      });
    }
    // console.log(itemIds);
    return JSON.stringify(itemIds);
  }

</script>
